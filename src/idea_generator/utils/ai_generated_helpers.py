import json
from typing import Dict, Any
from pydantic import BaseModel
from chatgpt_api import ChatGPTApi  # Assume the ChatGPTApi class is already imported
from business_idea import BusinessIdea  # Assuming the BusinessIdea class is already imported
from swot_analysis import SWOTAnalysisQuantitative, WeightedSWOTFactor  # Assuming the SWOTAnalysisQuantitative class is imported


def generate_swot_from_ai(business_idea: BusinessIdea, api: ChatGPTApi) -> SWOTAnalysisQuantitative:
    """
    Generate a SWOT analysis with weights based on a BusinessIdea using ChatGPT's API.

    Args:
        business_idea (BusinessIdea): The business idea to analyze.
        api (ChatGPTApi): The instance of the ChatGPTApi to send requests to.

    Returns:
        SWOTAnalysisQuantitative: A SWOT analysis with weighted factors generated by AI.
    """
    # Prepare the prompt to send to ChatGPT
    prompt = f"""
    Analyze the following business idea and generate a SWOT analysis with weights for each factor. 
    The weights should be on a scale of -10 to +10, where negative values represent threats/weaknesses, and positive values represent strengths/opportunities.
    Please consider factors like market competition, growth potential, operational risks, and any other relevant aspects.

    Business Idea:
    - Name: {business_idea.name}
    - Description: {business_idea.description}
    - Industry: {business_idea.industry}
    - Target Market: {business_idea.target_market}
    - Unique Value Proposition: {business_idea.unique_value_proposition}
    - Competitors: {', '.join(business_idea.competitors)}
    - Potential Risks: {', '.join(business_idea.potential_risks)}
    - Market Size: {business_idea.target_audience_size}
    - Revenue Potential: {business_idea.potential_revenue}

    Based on this information, generate a SWOT analysis with the weight of each factor. Also, provide any AI-powered insights about the potential of the business.
    """

    # Send the prompt to ChatGPT using the API
    try:
        response = api.post("completions", data={
            "model": "gpt-4",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
        })
    except Exception as e:
        print(f"Error in sending request: {e}")
        return None

    # Extract the SWOT analysis from the API response (assuming it's returned in a structured format)
    if "choices" not in response or len(response["choices"]) == 0:
        print("Error: No valid response from the AI model.")
        return None

    ai_response = response["choices"][0]["message"]["content"]

    # Example of expected AI response (a simple format for parsing):
    """
    SWOT Analysis:
    Strengths:
    - Innovative technology: 8
    - Strong team: 7

    Weaknesses:
    - High operational cost: -6
    - Limited customer base: -5

    Opportunities:
    - Growing market: 9
    - Partnership opportunities: 6

    Threats:
    - Strong competition: -7
    - Regulatory issues: -6
    """

    # Parse the response (this is a basic example; you may need a more advanced parser)
    strengths, weaknesses, opportunities, threats = [], [], [], []

    # Example of parsing logic (the AI response may vary in format, so adjust accordingly)
    try:
        lines = ai_response.split("\n")
        category = None
        for line in lines:
            if line.startswith("Strengths:"):
                category = "strengths"
            elif line.startswith("Weaknesses:"):
                category = "weaknesses"
            elif line.startswith("Opportunities:"):
                category = "opportunities"
            elif line.startswith("Threats:"):
                category = "threats"
            elif line.strip():  # Process individual SWOT lines
                factor, weight_str = line.rsplit(":", 1)
                weight = float(weight_str.strip())
                factor = factor.strip()

                if category == "strengths":
                    strengths.append(WeightedSWOTFactor(description=factor, weight=weight))
                elif category == "weaknesses":
                    weaknesses.append(WeightedSWOTFactor(description=factor, weight=weight))
                elif category == "opportunities":
                    opportunities.append(WeightedSWOTFactor(description=factor, weight=weight))
                elif category == "threats":
                    threats.append(WeightedSWOTFactor(description=factor, weight=weight))
    except Exception as e:
        print(f"Error parsing the AI response: {e}")
        return None

    # Create the SWOTAnalysisQuantitative instance
    swot_analysis = SWOTAnalysisQuantitative(
        strengths=strengths,
        weaknesses=weaknesses,
        opportunities=opportunities,
        threats=threats
    )

    return swot_analysis


def generate_additional_insights(business_idea: BusinessIdea, api: ChatGPTApi) -> Dict[str, Any]:
    """
    Generate additional AI-powered insights based on a business idea, such as market trends, competitive analysis, 
    and risk mitigation strategies.

    Args:
        business_idea (BusinessIdea): The business idea to analyze.
        api (ChatGPTApi): The instance of the ChatGPTApi to send requests to.

    Returns:
        Dict[str, Any]: A dictionary with additional insights, including market trends, competitive landscape, etc.
    """
    # Prepare the prompt to request additional insights
    prompt = f"""
    Based on the following business idea, provide detailed insights including:
    1. Market trends and growth potential
    2. Competitive analysis
    3. Risk mitigation strategies
    4. Recommendations for improving the business idea

    Business Idea:
    - Name: {business_idea.name}
    - Description: {business_idea.description}
    - Industry: {business_idea.industry}
    - Target Market: {business_idea.target_market}
    - Unique Value Proposition: {business_idea.unique_value_proposition}
    - Competitors: {', '.join(business_idea.competitors)}
    - Potential Risks: {', '.join(business_idea.potential_risks)}
    - Market Size: {business_idea.target_audience_size}
    - Revenue Potential: {business_idea.potential_revenue}

    Based on this information, please provide market analysis, competitive insights, and any advice for improving the business.
    """

    # Send the request to ChatGPT for additional insights
    try:
        response = api.post("completions", data={
            "model": "gpt-4",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
        })
    except Exception as e:
        print(f"Error in sending request: {e}")
        return {}

    # Extract and return additional insights from the AI response
    if "choices" not in response or len(response["choices"]) == 0:
        print("Error: No valid response from the AI model.")
        return {}

    ai_response = response["choices"][0]["message"]["content"]

    # Parse and return the response (this is a simple example)
    insights = {
        "market_trends": "Extracted market trends from AI",
        "competitive_analysis": "Extracted competitive analysis from AI",
        "risk_mitigation": "Extracted risk mitigation strategies from AI",
        "recommendations": ai_response.strip()
    }

    return insights
